/*
------ Input Format -----------------------------------------------------------------

First line: Number of Test Cases T and then follows their description
For each test case, first row indicate N s (single space separated) where N is number of vertices in directed graph where vertices are labelled 1 to N and s is the index of source vertex
Second row mentions the number of edges M
And then M rows mentioning  u v w(u,v)


1
6 0
9
0 1 10
0 2 2
0 3 10
1 2 1
2 3 4
3 4 2
1 5 8
4 1 2
3 5 4

------ Output Format ----------------------------------------------------------------


T rows corresponding to T test cases
Output row for each test case has 2N + 1 + 1 entries (all single space separated)
where first entry is the  total sum of min cost arborescence
and then N entries corresponding to vertices V1, V2, V3..., VN providing the distance of i-th vertex from the source vertex s. (Indicate -1 if unreachable)
and then Symbol #
and then N entries (corresponding to vertices V1, V2, V3..., VN) providing the label of the parent node through which one reaches i-th vertex (basically second last node in path from source vertex to that i-th vertex.

1
6 1
9
1 2 10
1 3 2
1 4 10
2 3 1
3 4 4
4 5 2
2 6 8
5 2 2
4 6 4

--------------------------------------------------------------------------------------

sample input output cases

3
6 1
9
1 2 10
1 3 2
1 4 10
2 3 1
3 4 4
4 5 2
2 6 8
5 2 2
4 6 4
8 1
13
1 2 5
1 5 11
5 2 6
6 5 10
6 2 2
2 3 3
2 7 13
7 6 7
3 7 9
3 4 12
4 8 1
8 3 4
7 8 8
7 7
8
1 2 3
2 3 4
3 1 5
3 4 16
4 5 10
5 6 11
6 4 12
7 1 20

14 0 10 2 6 8 10 # 0 5 1 3 4 4
47 0 5 8 20 34 24 17 21 # 0 1 2 3 6 7 3 4
64 20 23 27 43 53 64 0 # 7 1 2 3 4 5 0
Time taken by program is : 0.000529 sec


----------------NOTE that it shows a message when all the vertices are not reachable from source as arborescence is defined only when all nodes are reachable ---------------------------------------



*/

#include <iostream>
#include <bits/stdc++.h>
#include <sys/time.h>
using namespace std;
#define MAX 999999
#define M 99990
#define N 200
int parent[N];          // Array to store the parent node of each vertex
int reachable[N] = {0}; // Array to store the reachability status of each vertex
int cnum = -1;          // Variable to keep track of the current number of supernodes
int s, n;               // Variables to store the source vertex and total number of vertices

// Function declarations
void givefinal(int arr[][N]);
void dfs(int arr[][N], int t);
void finalans(int arr[][N]);
void mincostarbor(int arr[][N], int vert[], int en);

int main()
{
    struct timeval start, end;
    int t;
    cin >> t;
    gettimeofday(&start, NULL);
    while (t > 0)
    {
        cnum = -1;
        cin >> n >> s;
        int arr[N][N]; // Adjacency matrix to store edge weights
        int m, i, j, flag;
        cin >> m;
        vector<int> vec[n]; // Vector array to store edges for each vertex
        for (i = 0; i < n; i++)
            for (j = 0; j < n; j++)
                arr[i][j] = MAX; // Initialize all edge weights to a large value
        for (i = 0; i < N; i++)
            reachable[i] = 0; // Initialize all vertices as unreachable
        int u, v, w;
        for (i = 0; i < m; i++)
        {
            cin >> u >> v >> w;          // Read edge information from input
            arr[u - 1][v - 1] = w;       // Store the edge weight in the adjacency matrix
            vec[u - 1].push_back(w - 1); // Store the edge weight in the vector array
        }
        int vert[N]; // Stores only the reachable vertices
        j = 0; // to keep count of the no. of reacheable vertices

        dfs(arr, s - 1); // Perform DFS to mark reachable vertices from the source

        for (i = 0; i < n; i++)
            if (reachable[i] == 1)
                vert[j++] = i; // Store reachable vertices in the vert array

        if (j != n) // condition to exit the test case where any vertice is unreachable
        {
            cout << endl << "some of the vertices are unreachable" << endl;
            t = t - 1;
            continue;
        }
        mincostarbor(arr, vert, j); // Find the minimum cost arborescence
        t = t - 1;
    }
    gettimeofday(&end, NULL);
    double time_taken;
    time_taken = (end.tv_sec - start.tv_sec) * 1e6;
    time_taken = (time_taken + (end.tv_usec - start.tv_usec)) * 1e-6;

    cout << "Time taken by program is : " << fixed << time_taken << setprecision(6);
    cout << " sec" << endl;
    return 0;
}

void givefinal(int arr[][N])
{
    int i;
    while (cnum != -1)
    {
        int i, j, min;
        min = 0;
        for (i = 1; i < n + cnum; i++)
        {
            if (arr[min][n + cnum] > arr[i][n + cnum])
                min = i; // Find the minimum value of supernode's out-edge weight
        }
        for (i = 0; i < n + cnum; i++)
        {
            if (arr[i][n + cnum] == M && arr[min][i] == arr[min][n + cnum])
                break; // Find the second last node in the path from source to supernode
        }
        arr[parent[i]][i] = MAX; // Update the edge weight to a large value
        parent[i] = min;         // Update the parent of the supernode

        for (j = 0; j < n + cnum; j++)
            if (arr[n + cnum][j] < MAX)
            {
                for (i = 0; i < n + cnum; i++)
                    if (arr[i][j] == arr[n + cnum][j] && arr[i][n + cnum] == M)
                    {
                        if (arr[i][j] <= arr[parent[j]][j])
                            parent[j] = i; // Update the parent of a vertex if its weight is smaller
                    }
            }
        cnum--;
    }
}

void dfs(int arr[][N], int t)
{
    int j;
    reachable[t] = 1; // Mark the current vertex as reachable
    for (j = 0; j < n; j++)
        if (arr[t][j] < MAX)
        {
            if (reachable[j] == 0)
            {
                reachable[j] = 1; // Mark the adjacent vertex as reachable
                dfs(arr, j);      // Recursively explore the adjacent vertex
            }
        }
}

void finalans(int arr[][N])
{
    int i, d;
    d = 0;
    int dist[n] = {0}; // Array to store the distance of each vertex from the source
    for (i = 0; i < n; i++)
    {
        if (reachable[i] == 0)
            continue;
        if (i != s - 1)
            d = d + arr[parent[i]][i]; // Calculate the total sum of minimum-cost arborescence
    }
    cout << "\n\nTotal Sum of Minnimum-Cost Arborescence- " << d << endl;
    for (i = 0; i < n; i++)
    {
        if (i == s - 1)
        {
            dist[i] = 0;
            continue;
        }
        int temp = i;
        while (parent[temp] != -1)
        {
            dist[i] = dist[i] + arr[parent[temp]][temp]; // Calculate the distance from source to each vertex
            temp = parent[temp];                         // Update the current vertex to its parent
        }
    }
    int index = s;
    cout << "\nVertex "
         << "  distance"
         << " Parent node" << endl;
    for (i = 0; i < n; i++)
    {
        if (dist[i] < 10)
            cout << "   " << index << "   -   " << dist[i] << "   -   " << parent[i] + 1 << endl;
        else
        {
            cout << "   " << index << "   -   " << dist[i] << "  -   " << parent[i] + 1 << endl;
        }
        index++;
    }
    return;
}

// en -> count of reacheable vertices(total vertices)
void mincostarbor(int arr[][N], int vert[], int en)
{
    int min = 0;
    int i, j, k;
    for (j = 0; j < en; j++)
    {
        // initializing min as the index of 1st vertice
        min = vert[0];

        // Set the parent of the source vertex as -1
        if (vert[j] == s - 1)
        {
            parent[vert[j]] = -1; 
            continue;
        }

        // finding minimum weight from every vertice through each of its egde
        for (i = 1; i < en; i++)
            if (arr[min][vert[j]] > arr[vert[i]][vert[j]])
                min = vert[i]; // Find the vertex with minimum weight edge to the supernode

        parent[vert[j]] = min; // Set the parent of the vertex as the vertex with minimum weight edge
    }

    int visited[N] = {0}; // Initialize the visited array to keep track of visited vertices
    int a[N]; // Array to store the vertices in the current path
    int temp = vert[0]; // Start from the first vertex in the vertices array
    i = 1; // Initialize the index i to 1
    k = -1; // Initialize the index k to -1
    int flag; // Variable to indicate if an unvisited vertex is found

    // Perform a depth-first search to find cycles in the graph
    while (visited[temp] != i)
    {
        flag = 0;
        k++;
        a[k] = temp;
        visited[temp] = i;
        temp = parent[temp]; // Update the current vertex to its parent

        if (temp == -1)
        {
            i++;
            for (j = 0; j < en; j++)
            {
                if (visited[vert[j]] == 0)
                {
                    temp = vert[j]; // Find an unvisited vertex
                    flag = 1;
                    break;
                }
            }
            if (flag == 0)
                break;
        }
    }

    // If a cycle is found, process it
    if (visited[temp] == i)
    {
        unordered_set<int> cycle;
        cycle.insert(temp); // Insert the current vertex to the set
        while (a[k] != temp)
        {
            cycle.insert(a[k]); // Insert the vertices in the cycle to the set
            k--;
        }
        int z = 0;
        cnum++;

        unordered_set<int>::iterator itr;
        int min1;

        // Initialize the edges between the supernode and other vertices to a large value
        for (i = 0; i < n + cnum; i++)
            arr[n + cnum][i] = MAX;

        // Initialize the edges from other vertices to the supernode to a large value
        for (i = 0; i <= n + cnum; i++)
            arr[i][n + cnum] = MAX;

        // Process the edges between the vertices outside the cycle and the vertices in the cycle
        for (j = 0; j < en; j++)
        {
            // If the vertex is not in the cycle
            if (cycle.find(vert[j]) == cycle.end())
            {
                min = arr[vert[j]][*(cycle.begin())]; // Initialize min with the weight of the first vertex in the cycle
                min1 = arr[*(cycle.begin())][vert[j]]; // Initialize min1 with the weight of the first vertex in the cycle

                // Find the minimum weight edge to the vertices in the cycle
                for (itr = cycle.begin(); itr != cycle.end(); itr++)
                {
                    
                    // Update the minimum value for outgoing edges from vert[j] to vertices in the cycle
                    if (min > arr[vert[j]][(*itr)])
                        min = arr[vert[j]][(*itr)];

                    // Update the minimum value for incoming edges from vertices in the cycle to vert[j]
                    if (min1 > arr[(*itr)][vert[j]])
                        min1 = arr[(*itr)][vert[j]];
                }

                arr[vert[j]][n + cnum] = min; // Update the edge weight to the supernode
                arr[n + cnum][vert[j]] = min1; // Update the edge weight from the supernode
            }
            // If the vertex is in the cycle, update the edge weight to a large value
            else if (cycle.find(vert[j]) != cycle.end())
                arr[vert[j]][n + cnum] = M;
        }

        // Process the edges between the vertices outside the cycle
        for (i = 0; i < en; i++)
        {
            // If the vertex is not in the cycle, update the vertices array
            if (cycle.find(vert[i]) == cycle.end())
                vert[z++] = vert[i];
        }

        vert[z] = n + cnum; // Add the supernode to the vertices array
        en = z + 1; // Update the number of vertices in the array

        // Recursively call the `mincostarbor` function with the updated vertices array
        mincostarbor(arr, vert, en);
    }
    else if (flag == 0)
    {
        givefinal(arr);
        finalans(arr);
    }
    return;
}
